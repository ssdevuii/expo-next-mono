import { GetStaticProps } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import { useTranslation } from "next-i18next";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { api } from "~/utils/api";

import { useCallback, useEffect, useState } from "react";

// * Components
import LanguageSwitcher from "~/components/languageSwitcher/languageSwitcher";

import SDGcategorySlider from "~/components/SDGcategorySlider/SDGcategorySlider";
import KaryaCard from "~/components/karyaCard/karyaCard";
import PopularCard from "~/components/popularCard/PopularCard";
import Loading from "~/components/loading/loading";
import classNames from "classnames";

export default function Home() {
  const { t } = useTranslation();
  const latestProjects = api.project.getLatest.useQuery();
  const popularProject = api.project.getPopular.useQuery();

  const [popularKarya, setPopularKarya] = useState([]);
  const [latestKarya, setLatestKarya] = useState([]);
  const [valueMatkul, setValueMatkul] = useState("");
  const [valueTahun, setValueTahun] = useState("");
  const [valueNama, setValueNama] = useState("");
  const [subects, setSubects] = useState(["Mata kuliah"]);

  const onMatkulChange = useCallback((e: string) => {
    setValueMatkul(e);
  }, []);
  const onTahunChange = useCallback((e: string) => {
    setValueTahun(e);
  }, []);
  const onNamaChange = useCallback((e: any) => {
    // setValueNama(e.target.value as string);
  }, []);

  const onSubmit = useCallback((e: SubmitEvent) => {
    e.preventDefault();

    // history.push(`/pencarian/${valueMatkul || 'matkul'}/${valueTahun || 'tahun'}/${valueNama || ''}`)
  }, []);

  useEffect(() => {
    const fetchSearch = async () => {
      // TODO: impement this
    };

    const fetchProject = async () => {
      // TODO: impement this
    };
  }, []);

  return (
    <>
      <Head>
        <title>Infomatics Expo</title>
        <meta name="description" content="Generated by create-t3-app" />
        <meta name="robots" content="index, follow" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="App">
        <section className="landing__jumbotron" data-testid="landing-jumbotron">
          <LanguageSwitcher />

          <div className="landing__jumbotron__text">
            <h1 className="landing__jumbotron__title">
              {t("landing.jumbotron_title")}
              <span className="landing__jumbotron__desc">
                {t("landing.jumbotron_subTitle")}
              </span>
            </h1>
          </div>

          {/* <SearchForm className="landing__jumbotron__search" onSubmit={onSubmit}>
          <MatkulSelect onChange={onMatkulChange} value={valueMatkul}>
            {subects}
          </MatkulSelect>

          <YearSelect onChange={onTahunChange} value={valueTahun}>
            {["2022", "2021", "2020", "2019"]}
          </YearSelect>

          <NameInput onChange={onNamaChange} value={valueNama} />
          <SearchButton />
        </SearchForm> */}
        </section>

        <section className="landing_category">
          <div className="landing__section__header">
            <h2 className="landing__section__header__title">
              {t("landing.category_title")}
            </h2>
            <p className="landing__section__header__desc">
              {t("landing.category_desc")}
            </p>
          </div>

          <SDGcategorySlider />
        </section>

        <article className={classNames("landing__karya", "mb-8")} id="maincontent">
          <div className="landing__section__header">
            <h2 className="landing__section__header__title">
              {t("landing.karya_title")}
            </h2>
            <p className="landing__section__header__desc">
              {t("landing.karya_desc")}
            </p>
          </div>

          <div
            className={`landing__karya__content ${
              latestProjects.isLoading ? "landing__karya__content--loading" : ""
            }`}
          >
            {latestProjects.isLoading && <Loading />}
            {latestProjects.isSuccess &&
              latestProjects.data
                .slice(0, 6)
                .map((v, i) => <KaryaCard key={i} data={v} />)}
          </div>

          <Link href="/karya" className="landing__section__more">
            {t("landing.moreButton")}
          </Link>
        </article>

        <section className="landing__popular">
          <div className="landing__section__header">
            <h2 className="landing__section__header__title">
              {t("landing.popular_title")}
            </h2>
            <p className="landing__section__header__desc">
              {t("landing.popular_desc")}
            </p>
          </div>

          <div
            className={`landing__popular__content ${
              popularProject.isLoading
                ? "landing__popular__content--loading"
                : ""
            }`}
          >
            {popularProject.isLoading && <Loading />}
            {popularProject.isSuccess &&
              popularProject.data.map((data, i) => (
                <PopularCard key={i} data={data} />
              ))}
          </div>

          <Link href="/populer" className={classNames('landing__section__more', 'w-fit mx-auto')}>
            {t("landing.moreButton")}
          </Link>
        </section>
      </main>
    </>
  );
}

export const getStaticProps: GetStaticProps = async (context) => {
  const { locale } = context;

  return {
    props: {
      ...(await serverSideTranslations(locale as string)),
    },
  };
};
