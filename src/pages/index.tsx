import { type GetStaticProps } from "next";
import { useTranslation } from "next-i18next";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { api } from "~/utils/api";

import { type FormEventHandler, useCallback, useState, useMemo } from "react";

// * Components
import LanguageSwitcher from "~/components/languageSwitcher/languageSwitcher";

import SDGcategorySlider from "~/components/SDGcategorySlider/SDGcategorySlider";
import KaryaCard from "~/components/karyaCard/karyaCard";
import PopularCard from "~/components/popularCard/PopularCard";
import Loading from "~/components/loading/loading";
import classNames from "classnames";
import {
  MatkulSelect,
  NameInput,
  SearchButton,
  SearchForm,
  YearSelect,
} from "~/components/searchForm/searchForm";
import MainLayout from "~/layouts/main";
import { type SingleValue } from "react-select";

export default function Home() {
  const router = useRouter();
  const { t } = useTranslation();

  const [valueMatkul, setValueMatkul] = useState<{
    label: string | number;
    value: string | number;
  }>({ label: "Mata kuliah", value: "Mata kuliah" });
  const [valueTahun, setValueTahun] = useState<{
    label: string | number;
    value: string | number;
  }>({ label: "", value: "" });
  const [valueNama, setValueNama] = useState("");

  const latestProjects = api.project.getLatest.useQuery();
  const popularProject = api.project.getPopular.useQuery();
  const years = api.expoDate.getAll.useQuery();
  const subjects = api.subject.getAll.useQuery();

  const yearMemoOptions = useMemo(() => {
    if (years.data) {
      return years.data.map((v) => ({
        label: v.name,
        value: v.year,
      }));
    }

    return [];
  }, [years.data]);

  const subjectMemoOptions = useMemo(() => {
    if (subjects.data) {
      return subjects.data.map((v) => ({
        label: v.name,
        value: v.id,
      }));
    }

    return [];
  }, [subjects.data]);

  const onMatkulChange = useCallback((e: SingleValue<typeof valueMatkul>) => {
    setValueMatkul({ label: e?.label ?? "", value: e?.value ?? "" });
  }, []);
  const onTahunChange = useCallback((e: SingleValue<typeof valueTahun>) => {
    setValueTahun({ label: e?.label ?? "", value: e?.value ?? "" });
  }, []);
  const onNamaChange = useCallback((e: string) => {
    setValueNama(e);
  }, []);

  const onSubmit: FormEventHandler<HTMLFormElement> = useCallback(
    (e) => {
      e.preventDefault();
      const searchParams = new URLSearchParams();

      if (valueMatkul.value !== "Mata kuliah") {
        searchParams.append("subject", valueMatkul.value.toString());
      }
      if (valueTahun.value !== "") {
        searchParams.append("year", valueTahun.value.toString());
      }
      if (valueNama !== "") {
        searchParams.append("name", valueNama);
      }

      void router.push(`/karya/search?${searchParams.toString()}`);
    },
    [router, valueMatkul, valueNama, valueTahun]
  );

  return (
    <MainLayout>
      <Head>
        <title>Infomatics Expo</title>
        <meta name="description" content="Generated by create-t3-app" />
        <meta name="robots" content="index, follow" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="App">
        <section className="landing__jumbotron" data-testid="landing-jumbotron">
          <LanguageSwitcher />

          <div className="landing__jumbotron__text">
            <h1 className="landing__jumbotron__title">
              {t("landing.jumbotron_title")}
              <span className="landing__jumbotron__desc">
                {t("landing.jumbotron_subTitle")}
              </span>
            </h1>
          </div>

          <SearchForm
            className="relative bottom-0 -mb-9 translate-y-1/3"
            onSubmit={onSubmit}
          >
            <MatkulSelect
              options={subjectMemoOptions}
              onChange={onMatkulChange}
              value={valueMatkul}
            />

            <YearSelect
              options={yearMemoOptions}
              onChange={onTahunChange}
              value={valueTahun}
            />

            <NameInput onChange={onNamaChange} value={valueNama} />
            <SearchButton />
          </SearchForm>
        </section>

        <section className="landing_category">
          <div className="landing__section__header">
            <h2 className="landing__section__header__title">
              {t("landing.category_title")}
            </h2>
            <p className="landing__section__header__desc">
              {t("landing.category_desc")}
            </p>
          </div>

          <SDGcategorySlider />
        </section>

        <article
          className={classNames("landing__karya", "mb-8")}
          id="maincontent"
        >
          <div className="landing__section__header">
            <h2 className="landing__section__header__title">
              {t("landing.karya_title")}
            </h2>
            <p className="landing__section__header__desc">
              {t("landing.karya_desc")}
            </p>
          </div>

          <div
            className={`landing__karya__content ${
              latestProjects.isLoading ? "landing__karya__content--loading" : ""
            }`}
          >
            {latestProjects.isLoading && <Loading />}
            {latestProjects.isSuccess &&
              latestProjects.data
                .slice(0, 6)
                .map((v, i) => <KaryaCard key={i} data={v} />)}
          </div>

          <Link href="/karya" className="landing__section__more">
            {t("landing.moreButton")}
          </Link>
        </article>

        <section className="landing__popular">
          <div className="landing__section__header">
            <h2 className="landing__section__header__title">
              {t("landing.popular_title")}
            </h2>
            <p className="landing__section__header__desc">
              {t("landing.popular_desc")}
            </p>
          </div>

          <div
            className={`landing__popular__content ${
              popularProject.isLoading
                ? "landing__popular__content--loading"
                : ""
            }`}
          >
            {popularProject.isLoading && <Loading />}
            {popularProject.isSuccess &&
              popularProject.data.map((data, i) => (
                <PopularCard key={i} data={data} />
              ))}
          </div>

          <Link
            href="/populer"
            className={classNames("landing__section__more", "mx-auto w-fit")}
          >
            {t("landing.moreButton")}
          </Link>
        </section>
      </main>
    </MainLayout>
  );
}

export const getStaticProps: GetStaticProps = async (context) => {
  const { locale } = context;

  return {
    props: {
      ...(await serverSideTranslations(locale as string)),
    },
  };
};
